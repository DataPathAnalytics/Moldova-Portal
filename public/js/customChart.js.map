{"version":3,"sources":["lineChart-homepage.js","lineChart-rest.js","horizontal-barChart.js","barChart-contract.js","lineChart-header.js","range-slider.js"],"names":[],"mappingsznfile":"customChart.js","sourcesContent":["var createLineChart = function (data, parentWidth) {\n\n    if ($(window).width() < 768) {\n        var height = 200;\n    }\n    else {\n        var height = 300;\n    }\n\n    //fix for error on lineChart with single data\n    if(data.length == 1){\n        data.push(data[0]) ;\n    }\n\n    var divNode = d3.select(\"#main-content\").node(),\n        width = parentWidth;\n    var svg = d3.select(\"#linechart-homepage\")\n        .append(\"svg\")\n        .attr(\"width\", width + 1)\n        .attr(\"height\", height)\n        .attr(\"id\", \"visualization\");\n    var vis = d3.select(\"#visualization\"),\n        margin = {\n            top: 20, right: 20, bottom: 20, left: 50\n        };\n\n    var xScale = d3.scale.ordinal().rangeRoundBands([0, width - 50], 0);\n    var yScale = d3.scale.linear()\n        .range([height - margin.top, margin.bottom]);\n\n    var xAxis = d3.svg.axis()\n        .orient(\"bottom\")\n        .scale(xScale)\n        .ticks(2);\n    var yAxis = d3.svg.axis()\n        .orient(\"left\")\n        .scale(yScale)\n        .ticks(6);\n\n    //function make_x_axis(){\n    //    return d3.svg.axis()\n    //            .scale(xScale)\n    //            .orient(\"bottom\")\n    //            .ticks(5)\n    //}\n    function make_y_axis() {\n        return d3.svg.axis()\n            .scale(yScale)\n            .orient(\"left\")\n            .ticks(5)\n    }\n\n    data.forEach(function (d) {\n        d.xValue = d.xValue;\n        d.chart1 = +d.chart1;\n        d.chart2 = +d.chart2;\n    });\n    var maxValue = d3.max(data, function (d) {\n        return (d.chart1 > d.chart2) ? d.chart1 : d.chart2;\n    });\n\n    xScale.domain(data.map(function (d) {\n        return d.xValue;\n    }));\n    yScale.domain([0, maxValue]);\n\n\n    vis.append(\"svg:g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height - margin.bottom) + \")\")\n        .call(xAxis);\n\n    // vis.append(\"svg:g\")\n    // \t.attr(\"class\",\"grid\")\n    // \t.attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height - margin.bottom)+ \")\")\n    // \t.call(make_x_axis()\n    // \t\t\t.tickSize(-height+margin.top, 0 ,0 )\n    // \t\t\t.tickFormat(\"\")\n    // \t\t)\n    vis.append(\"svg:g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n        .call(yAxis);\n\n    vis.append(\"svg:g\")\n        .attr(\"class\", \"grid\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n        .call(make_y_axis()\n            .tickSize(-width, 0, 0)\n            .tickFormat(\"\")\n        )\n\n    var lineGen1 = d3.svg.line()\n        .x(function (d) {\n            return xScale(d.xValue);\n        })\n        .y(function (d) {\n            return yScale(d.chart1);\n        });\n    // .interpolate(\"basis\");\n    var linePath1 = vis.append('svg:path')\n        .attr('d', lineGen1(data))\n        .attr(\"transform\", \"translate(\" + (((xScale(data[0].xValue) + xScale(data[1].xValue)) / 2) + margin.left) + \",0)\")\n        .attr(\"stroke\", \"#B8E986\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"fill\", \"none\");\n\n    var totalLength1 = linePath1.node().getTotalLength();\n\n    linePath1\n        .attr(\"stroke-dasharray\", totalLength1 + \" \" + totalLength1)\n        .attr(\"stroke-dashoffset\", totalLength1)\n        .transition()\n        .duration(1000)\n        .ease(\"linear\")\n        .attr(\"stroke-dashoffset\", 0);\n\n    var lineGen2 = d3.svg.line()\n        .x(function (d) {\n            return xScale(d.xValue);\n        })\n        .y(function (d) {\n            return yScale(d.chart2);\n        });\n\n    var linePath2 = vis.append('svg:path')\n        .attr('d', lineGen2(data))\n        .attr(\"transform\", \"translate(\" + (((xScale(data[0].xValue) + xScale(data[1].xValue)) / 2) + margin.left) + \",0)\")\n        .attr(\"stroke\", \"#50E3C2\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"fill\", \"none\");\n\n    var totalLength2 = linePath2.node().getTotalLength();\n\n    linePath2\n        .attr(\"stroke-dasharray\", totalLength2 + \" \" + totalLength2)\n        .attr(\"stroke-dashoffset\", totalLength2)\n        .transition()\n        .duration(1000)\n        .ease(\"linear\")\n        .attr(\"stroke-dashoffset\", 0);\n\n    vis.selectAll(\"dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .filter(function (d) {\n            return d.chart1;\n        })\n        .attr(\"r\", 4)\n        .attr(\"fill\", \"#B8E986\")\n        .attr(\"cx\", function (d) {\n            return xScale(d.xValue) + (((xScale(data[0].xValue) + xScale(data[1].xValue)) / 2) + margin.left);\n        })\n        .attr(\"cy\", function (d) {\n            return yScale(d.chart1);\n        })\n        .on(\"mouseover\", function (d) {\n            var mousePos = d3.mouse(divNode);\n            d3.select(\"#tooltip-wrap\")\n                .style(\"left\", mousePos[0] + \"px\")\n                .style(\"top\", mousePos[1] + \"px\")\n                .select(\"#value\")\n                .attr(\"text-anchor\", \"middle\")\n                .html(d.chart1);\n\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n        })\n        .on(\"mouseout\", function (d) {\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n        });\n\n    vis.selectAll(\"dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .filter(function (d) {\n            return d.chart2;\n        })\n        .attr(\"r\", 4)\n        .attr(\"fill\", \"#50E3C2\")\n        .attr(\"cx\", function (d) {\n            return xScale(d.xValue) + (((xScale(data[0].xValue) + xScale(data[1].xValue)) / 2) + margin.left);\n        })\n        .attr(\"cy\", function (d) {\n            return yScale(d.chart2);\n        })\n        .on(\"mouseover\", function (d) {\n            var mousePos = d3.mouse(divNode);\n            d3.select(\"#tooltip-wrap\")\n                .style(\"left\", mousePos[0] + \"px\")\n                .style(\"top\", mousePos[1] + \"px\")\n                .select(\"#value\")\n                .attr(\"text-anchor\", \"middle\")\n                .html(d.chart2);\n\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n        })\n        .on(\"mouseout\", function (d) {\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n        });\n\n};\n\n// Calling the function that creates the linechart\n//createLineChart(data);\n","var createLineChartRest = function(data,widthParent){\n    if($(window).width() < 768){\n        var height1 = 200;\n    }\n    else {\n        var height1 = 300;\n    }\n    var divNode = d3.select(\"#main-content\").node();\n    var width1 = widthParent;\n    var svg = d3.select(\"#linechart-rest\")\n                .append(\"svg\")\n                .attr(\"width\", width1 + 1)\n                .attr(\"height\", height1)\n                .attr(\"id\", \"visualization\");\n    var vis = d3.select(\"#visualization\"),\n                margin = {\n                    top: 20, right:20, bottom:20, left: 34\n                };\n    var xScale = d3.scale.ordinal().rangeRoundBands([0,width1-50], 0);\n    var xDot = d3.scale.ordinal().rangeRoundBands([0, width1], 1.07);\n    var yScale = d3.scale.linear()\n                .range([height1 - margin.top, margin.bottom]);\n    var xAxis = d3.svg.axis()\n                    .orient(\"bottom\")\n                    .scale(xScale)\n                    .ticks(2);\n    var yAxis = d3.svg.axis()\n                    .orient(\"left\")\n                    .scale(yScale)\n                    .ticks(6);\n\n    function make_x_axis(){\n        return d3.svg.axis()\n                .scale(xScale)\n                .orient(\"bottom\")\n                .ticks(6)\n    }\n    function make_y_axis(){\n        return d3.svg.axis()\n                .scale(yScale)\n                .orient(\"left\")\n                .ticks(6)\n    }\n        data.forEach(function (d){\n            d.xValue = d.xValue;\n            d.chart1 = +d.chart1;\n            d.chart2= +d.chart2;\n        });\n        var maxValue = d3.max(data, function(d){\n            return d.chart2; });\n        xScale.domain(data.map(function (d) {return d.xValue; }));\n        xDot.domain(data.map(function (d) {return d.xValue; }));\n        yScale.domain([0,maxValue]);\n\n        vis.append(\"svg:g\")\n            .attr(\"class\",\"axis\")\n            .attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height1 - margin.bottom)+ \")\")\n            .call(xAxis);\n\n            // for the vertical grids\n            // ==============================================================\n         //vis.append(\"svg:g\")\n         //\t.attr(\"class\",\"grid\")\n         //\t.attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height1 - margin.bottom)+ \")\")\n         //\t.call(make_x_axis()\n         //\t\t\t.tickSize(-height1, 0 ,0 )\n         //\t\t\t.tickFormat(\"\")\n         //\t\t);\n        // =====================================================================\n\n        vis.append(\"svg:g\")\n            .attr(\"class\",\"axis\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n            .call(yAxis);\n\n        vis.append(\"svg:g\")\n            .attr(\"class\",\"grid\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n            .call(make_y_axis()\n                    .tickSize(-width1,0,0)\n                    .tickFormat(\"\")\n                );\n\n        var lineGen = d3.svg.line()\n                    .x(function (d) {\n                        return xScale(d.xValue);\n                    })\n                    .y(function (d) {\n                        return yScale(d.chart2);\n                    });\n    if(data.length > 1){\n        var linePath = vis.append('svg:path')\n            .attr('d', lineGen(data))\n            .attr(\"transform\", \"translate(\" + (((xScale(data[0].xValue)+xScale(data[1].xValue))/2) + margin.left) + \",0)\")\n            .attr(\"stroke\", \"#B8E986\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\");\n\n        var totalLength = linePath.node().getTotalLength();\n\n        linePath\n            .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n            .attr(\"stroke-dashoffset\", totalLength)\n            .transition()\n            .duration(1000)\n            .ease(\"linear\")\n            .attr(\"stroke-dashoffset\", 0);\n\n        vis.selectAll(\"dot\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .filter(function (d) {\n                return d.chart2;\n            })\n            .attr(\"r\", 4)\n            .attr(\"fill\", \"#B8E986\")\n            .attr(\"cx\", function (d){\n                return xScale(d.xValue) + (((xScale(data[0].xValue)+xScale(data[1].xValue))/2) + margin.left);\n            })\n            .attr(\"cy\", function (d){\n                return yScale(d.chart2);\n            })\n            .on(\"mouseover\", function(d){\n                var mousePos = d3.mouse(divNode);\n                d3.select(\"#tooltip-wrap\")\n                    .style(\"left\",mousePos[0] + \"px\")\n                    .style(\"top\",mousePos[1] + \"px\")\n                    .select(\"#value\")\n                    .attr(\"text-anchor\",\"middle\")\n                    .html(d.chart2);\n\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n            })\n            .on(\"mouseout\",function(d){\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n            });\n    }\n    else if(data.length ===1){\n        vis.selectAll(\"dot\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .filter(function (d) {\n                return d.chart2;\n            })\n            .attr(\"r\", 4)\n            .attr(\"fill\", \"#B8E986\")\n            .attr(\"cx\", function (d){\n                return xDot(d.xValue);\n            })\n            .attr(\"cy\", function (d){\n                return yScale(d.chart2);\n            })\n            .on(\"mouseover\", function(d){\n                var mousePos = d3.mouse(divNode);\n                d3.select(\"#tooltip-wrap\")\n                    .style(\"left\",mousePos[0] + \"px\")\n                    .style(\"top\",mousePos[1] + \"px\")\n                    .select(\"#value\")\n                    .attr(\"text-anchor\",\"middle\")\n                    .html(d.chart2);\n\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n            })\n            .on(\"mouseout\",function(d){\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n            });\n    }\n    else{\n        vis.selectAll(\"dot\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .filter(function (d) {\n                return d.chart2;\n            })\n            .attr(\"r\", 4)\n            .attr(\"fill\", \"#B8E986\")\n            .attr(\"cx\", function (d){\n                return xDot(d.xValue);\n            })\n            .attr(\"cy\", function (d){\n                return yScale(d.chart2);\n            })\n            .on(\"mouseover\", function(d){\n                var mousePos = d3.mouse(divNode);\n                d3.select(\"#tooltip-wrap\")\n                    .style(\"left\",mousePos[0] + \"px\")\n                    .style(\"top\",mousePos[1] + \"px\")\n                    .select(\"#value\")\n                    .attr(\"text-anchor\",\"middle\")\n                    .html(d.chart2);\n\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n            })\n            .on(\"mouseout\",function(d){\n                d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n            });\n    }\n};\n","var createBarChartProcuring = function (data, definedId, url, widthParent, type) {\n    if($(window).width() < 768){\n        var marginBottom = 12,\n            barHeight = 37,\n            y1 = 21;\n    }\n    else {\n\n        var marginBottom = 20,\n            barHeight = 55,\n            y1 = 32;\n    }\n\n    console.log(\"test\");\n    //var divNode = d3.select(\"#main-content\").node();\n\n    var dataRange = d3.max(data, function (d) {\n        return d.value;\n    });\n    var divId = \"#\" + definedId;\n    var width = widthParent;\n    var chart,\n        height = barHeight * data.length;\n    var x, y;\n    var bodyNode = d3.select(\"#main\").node();\n\n    $(divId).html('');\n    chart = d3.select(divId)\n        .append(\"svg\")\n        .attr(\"class\", \"chart\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    x = d3.scale.linear()\n        .domain([0, dataRange])\n        .range([0, width - 151]);\n    y = d3.scale.ordinal()\n        .rangeBands([0, height]);\n\n    chart.selectAll(\"rect\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", 170)\n        .attr(\"y\", function (d, i) {\n            return i * (height / data.length);\n        })\n        .attr(\"class\", function(d){\n            if(d.name !== null) {\n                return \"name\";\n            }\n        })\n        .attr(\"height\", barHeight - marginBottom)\n        .on(\"click\", function (d) {\n            if(d.name !== null) {\n                return window.location.assign(window.location.origin + \"/\" + url + \"/\" + d.name);\n            }\n        })\n        .attr(\"width\",0)\n        .transition()\n        .duration(900)\n        .ease(\"linear\")\n        .attr(\"width\", function (d) {\n            return x(d.value);\n        })\n        .attr(\"x\",170);\n\n    chart.selectAll(\"text.value\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            if(type === 'amount') {\n                return d3.format(\",\")(Math.round(d.value)) + ' MDL';\n            }else{\n                return d3.format(\",\")(Math.round(d.value));\n            }\n        })\n        .attr(\"y\", function (d, i) {\n            return i * (height / data.length);\n        })\n        .attr(\"dx\", 173)\n        .attr(\"dy\", barHeight - y1)\n        .attr(\"class\",\"value\")\n        .on(\"click\", function (d) {\n            if(d.name !== null) {\n                return window.location.assign(window.location.origin + \"/\" + url + \"/\" + d.name);\n            }\n        })\n        .attr(\"id\", function (d, i) {\n            return d.name;\n        });\n    chart.selectAll(\"text.name\")\n        .data(data)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            if ((d.name) != null) {\n                if ((d.name).length > 20) {\n                    return (String(d.name).slice(0, 21) + \"...\");\n                }\n                else {\n                    return (String(d.name).slice(0, 21));\n                }\n            }\n            else {\n                return ('N/A');\n            }\n        })\n        .attr(\"y\", function (d, i) {\n            return i * (height / data.length);\n        })\n        .attr(\"dx\", 0)\n        .attr(\"dy\", barHeight + y1)\n        .attr(\"class\", function(d){\n            if(d.name !== null) {\n                return \"name\";\n            }\n        })\n        .on(\"click\", function (d) {\n            if(d.name !== null) {\n                return window.location.assign(window.location.origin + \"/\" + url + \"/\" + d.name);\n            }\n        })\n        .attr(\"id\", function (d, i) {\n            return d.name;\n        });\n};\n\n\n\n","    var createBarChartContract = function (data, definedId, url) {\n    if($(window).width() < 768){\n        var heightContainer = 200;\n    }\n    else {\n        var heightContainer = 300;\n    }\n\n    console.log(\"test\");\n    \n    var divNode = d3.select(\"#main-content\").node();\n    var divId = \"#\" + definedId;\n    var widthOfParent = $(divId).parent().width();\n    var margin = {top: 20, right: 20, bottom: 20, left: 100},\n        width = widthOfParent - margin.left - margin.right,\n        height = heightContainer - margin.top - margin.bottom;\n\n    var x = d3.scale.ordinal().rangeRoundBands([0, width], .35);\n\n    var y = d3.scale.linear().range([height, 0]);\n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\");\n\n    var yAxis = d3.svg.axis()\n        .scale(y)\n        .orient(\"left\")\n        .ticks(5);\n\n    var svg = d3.select(\"#barChart-amount\").append(\"svg\")\n        .attr(\"width\", width + margin.left + 1)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    data.forEach(function(d) {\n        d.name = d.name;\n        d.value = +d.value;\n    });\n\n    x.domain(data.map(function(d) { return d.name; }));\n    y.domain([0, d3.max(data, function(d) { return d.value; })]);\n\n    function make_y_axis(){\n        return d3.svg.axis()\n            .scale(y)\n            .orient(\"left\")\n            .ticks(5)\n    }\n\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis)\n\n        .selectAll(\"text\")\n        .style(\"text-anchor\", \"end\")\n        .attr(\"dx\", \"1em\")\n        .attr(\"dy\", \".75em\");\n\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\");\n\n    svg.append(\"svg:g\")\n        .attr(\"class\",\"grid\")\n        .attr(\"transform\", \"translate(0,0)\")\n        .call(make_y_axis()\n            .tickSize(-width,0,0)\n            .tickFormat(\"\")\n        )\n\n\n  /*  // chart title\n\n    svg.selectAll(\"text.bar\")\n        .data(data)\n        .enter().append(\"text\")\n        .attr(\"class\", \"verticalBar-value numeric-data\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", function(d) { return x(d.name) + x.rangeBand()/2; })\n        .attr(\"y\", function(d) { return y(d.value) - 5; })\n        .html(function(d) { return d.value; });*/\n\n    svg.selectAll(\"bar\")\n        .data(data)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"bars\")\n        .attr(\"x\", function(d) {\n            return x(d.name); })\n        .attr(\"width\", x.rangeBand())\n            .attr(\"y\", height)\n            .attr(\"height\", 0)\n            .transition()\n            .duration(900)\n            .ease(\"linear\")\n        .attr(\"y\", function(d){\n            return y(d.value)})\n        .attr(\"height\", function(d) {\n            if(d.value < 0)\n                return height - y(0);\n            else\n            return height - y(d.value); });\n\n    svg.selectAll(\"rect\")\n        .on(\"mousemove\", function(d){\n            var mousePos = d3.mouse(divNode);\n            d3.select(\"#tooltip-no-tip\")\n                .style(\"left\",mousePos[0] + \"px\")\n                .style(\"top\",mousePos[1] + \"px\")\n                .select(\"#value\")\n                .attr(\"text-anchor\",\"middle\")\n                .html(d.value);\n\n            d3.select(\"#tooltip-no-tip\").classed(\"hide\", false);\n        })\n        .on(\"mouseout\",function(d){\n            d3.select(\"#tooltip-no-tip\").classed(\"hide\", true);\n        });\n\n};\n","var createLineChartONHeader = function(data,widthParent,typeColor){\n    console.log(typeColor);\n    if($(window).width() < 768){\n        var height1 = 200;\n    }\n    else {\n        var height1 = 250;\n    }\n    var divNode = d3.select(\"#main-content\").node();\n    var width1 = widthParent;\n    var svg = d3.select(\"#header-linechart\")\n        .append(\"svg\")\n        .attr(\"width\", width1 + 1)\n        .attr(\"height\", height1)\n        .attr(\"id\", \"visualization\");\n    var vis = d3.select(\"#visualization\"),\n        margin = {\n            top: 20, right:20, bottom:20, left: 40\n        };\n\n\n    var xScale = d3.scale.ordinal().rangeRoundBands([0,width1-50], 0);\n    var yScale = d3.scale.linear()\n        .range([height1 - margin.top, margin.bottom]);\n    var xAxis = d3.svg.axis()\n        .orient(\"bottom\")\n        .scale(xScale)\n        .ticks(2);\n    var yAxis = d3.svg.axis()\n        .orient(\"left\")\n        .scale(yScale)\n        .ticks(6);\n\n    function make_x_axis(){\n        return d3.svg.axis()\n            .scale(xScale)\n            .orient(\"bottom\")\n            .ticks(6)\n    }\n    function make_y_axis(){\n        return d3.svg.axis()\n            .scale(yScale)\n            .orient(\"left\")\n            .ticks(6)\n    }\n    data.forEach(function (d){\n        d.xValue = d.xValue;\n        d.chart1 = +d.chart1;\n        d.chart2= +d.chart2;\n    });\n    var maxValue = d3.max(data, function(d){ return d.chart2; });\n    xScale.domain(data.map(function (d) {return d.xValue; }));\n    yScale.domain([0,maxValue]);\n\n    vis.append(\"svg:g\")\n        .attr(\"class\",\"axis\")\n        .attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height1 - margin.bottom)+ \")\")\n        .call(xAxis);\n\n    // for the vertical grids\n    // ==============================================================\n    // vis.append(\"svg:g\")\n    // \t.attr(\"class\",\"grid\")\n    // \t.attr(\"transform\", \"translate(\" + (margin.left) + \",\" + (height1 - margin.bottom)+ \")\")\n    // \t.call(make_x_axis()\n    // \t\t\t.tickSize(-height1, 0 ,0 )\n    // \t\t\t.tickFormat(\"\")\n    // \t\t)\n    // =====================================================================\n\n    vis.append(\"svg:g\")\n        .attr(\"class\",\"axis\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n        .call(yAxis);\n\n    vis.append(\"svg:g\")\n        .attr(\"class\",\"grid\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",0)\")\n        .call(make_y_axis()\n            .tickSize(-width1,0,0)\n            .tickFormat(\"\")\n        )\n\n    var lineGen = d3.svg.line()\n        .x(function (d) {\n            return xScale(d.xValue);\n        })\n        .y(function (d) {\n            return yScale(d.chart2);\n        });\n\n    var linePath = vis.append('svg:path')\n        .attr('d', lineGen(data))\n        .attr(\"transform\", \"translate(\" + (((xScale(data[0].xValue)+xScale(data[1].xValue))/2) + margin.left) + \",0)\")\n        .attr(\"stroke\", typeColor)\n        .attr(\"stroke-width\", 2)\n        .attr(\"fill\", \"none\");\n\n    var totalLength = linePath.node().getTotalLength();\n\n    linePath\n        .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n        .attr(\"stroke-dashoffset\", totalLength)\n        .transition()\n        .duration(1000)\n        .ease(\"linear\")\n        .attr(\"stroke-dashoffset\", 0);\n\n    vis.selectAll(\"dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .filter(function (d) {\n            return d.chart2;\n        })\n        .attr(\"r\", 4)\n        .attr(\"fill\", typeColor)\n        // .attr(\"transform\", \"translate(\" + (((xScale(data[0].xValue)+xScale(data[1].xValue))/2) + margin.left) + \",0)\")\n        .attr(\"cx\", function (d){\n            return xScale(d.xValue) + (((xScale(data[0].xValue)+xScale(data[1].xValue))/2) + margin.left);\n        })\n        .attr(\"cy\", function (d){\n            return yScale(d.chart2);\n        })\n        .on(\"mouseover\", function(d){\n            var mousePos = d3.mouse(divNode);\n            d3.select(\"#tooltip-wrap\")\n                .style(\"left\",mousePos[0] + \"px\")\n                .style(\"top\",mousePos[1] + \"px\")\n                .select(\"#value\")\n                .attr(\"text-anchor\",\"middle\")\n                .html(d.chart2);\n\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", false);\n        })\n        .on(\"mouseout\",function(d){\n            d3.select(\"#tooltip-wrap\").classed(\"hide\", true);\n        });\n\n};\n","var createSlider = function (route, type, widthOfParent, definedId, url, element) {\n    var formatDate = d3.time.format(\"%Y\");\n    var customFormat = d3.time.format(\"%Y%m\");\n    var cValue = 0;\n    var flag = 0;\n    var insetValue1, insetValue2;\n// parameters\n    var margin = {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n        },\n        width = widthOfParent - margin.left - margin.right,\n        height = 70 - margin.bottom - margin.top;\n\n// scale function\n    var timeScale = d3.time.scale()\n        .domain([new Date('2012-01-01 '), new Date('2017-12-30')])\n        .range([0, width])\n        .clamp(true);\n    var axistimeScale = d3.time.scale()\n        .domain([new Date('2011-01-01'), new Date('2017-01-01')])\n        .range([0, width])\n        .clamp(true);\n\n\n// initial value\n// var startValue = timeScale(new Date('2014-01-10'));\n    var startingValue1 = new Date('2017-01-01');\n    var startingValue2 = new Date('2017-12-30');\n\n// defines brush\n    var brush = d3.svg.brush()\n        .x(timeScale)\n        // .extent([startingValue1, startingValue2])\n        .on(\"brush\", brushed)\n        .on(\"brushend\", brushend);\n\n    var svg = d3.select(element).append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height / 2 + \")\")\n        .call(d3.svg.axis()\n            .scale(axistimeScale)\n            .orient(\"bottom\")\n            .tickFormat(function (d) {\n                return formatDate(d);\n            })\n            .tickSize(10)\n            .tickPadding(0)\n        )\n        .selectAll(\"text\")\n        .attr(\"x\", -width / 12)\n\n    var slider = svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,10)\")\n        .attr(\"class\", \"slider\")\n        .call(brush)\n\n    slider.selectAll(\".extent,.resize\").remove();\n\n// call(brush) generates <rect class=\"background\"> on slider. (see DOM in inspect element)\n// slider pointer (crosshair)\n    slider.select(\".background\")\n        .attr(\"height\", height / 2)\n        .style(\"fill\", \"white\")\n    // .style(\"visibility\",\"visible\");\n\n// slider white line\n    d3.select(element + \" .slider\")\n        .insert(\"line\", \"rect.background\")\n        .attr(\"x1\", \"0\")\n        .attr(\"x2\", width)\n        .attr(\"class\", \"main-line\")\n\n    var handle1 = slider.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height / 2) + \")\")\n        .attr(\"class\", \"handle1\")\n    var handle2 = slider.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height / 2) + \")\")\n        .attr(\"class\", \"handle2\")\n\n    handle1.append(\"circle\")\n        .attr(\"r\", \"6\")\n        .attr(\"class\", \"slider-circle\")\n\n    handle2.append(\"circle\")\n        .attr(\"r\", \"6\")\n        .attr(\"class\", \"slider-circle\")\n\n    var value1 = startingValue1;\n    var value2 = startingValue2;\n\n    handle1.attr(\"transform\", \"translate(\" + timeScale(value1) + \",0)\");\n    handle2.attr(\"transform\", \"translate(\" + timeScale(value2) + \",0)\");\n\n    slider.call(brush.event)\n\n\n    function brushed() {\n\n        var calculate = (+customFormat(value1) + +customFormat(value2)) / 2;\n        var mouseValue = timeScale.invert(d3.mouse(this)[0]);\n        if (customFormat(mouseValue) < calculate) {\n            value1 = mouseValue;\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value1) + \",0)\");\n            handle1.select('text').text(formatDate(value1));\n            flag = 1;\n        }\n        if (customFormat(mouseValue) > calculate) {\n            value2 = mouseValue;\n            handle2.attr(\"transform\", \"translate(\" + timeScale(value2) + \",0)\");\n            handle2.select('text').text(formatDate(value2));\n            flag = 2;\n        }\n\n        insetValue1 = timeScale(value1);\n        insetValue2 = timeScale(value2);\n\n        d3.select(element + \" .slider-inset\").remove();\n        // Initial slider inset\n        d3.select(element + \" .slider\")\n            .insert(\"line\", \"rect.background\")\n            .attr(\"x1\", insetValue1)\n            .attr(\"x2\", insetValue2)\n            .attr(\"class\", \"slider-inset\")\n\n    }\n\n//\n    function brushend() {\n        value = timeScale.invert(d3.mouse(this)[0]);\n        cValue = customFormat(value);\n        // 2012\n        if (cValue > 2011 && cValue < 201206) {\n            value = new Date('2011-12-30');\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n            flag = \"handle1\";\n        }\n        else if (cValue >= 201206 && cValue < 201212) {\n            value = new Date('2012-12-30');\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n            flag = \"handle1\";\n\n        }\n// 2013\n        else if (cValue > 2013 && cValue < 201306) {\n            value = new Date('2012-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                handle1.select('text').text(formatDate(value));\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                handle2.select('text').text(formatDate(value));\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201306 && cValue <= 201312) {\n            value = new Date('2013-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2014\n        else if (cValue > 201312 && cValue < 201406) {\n            value = new Date('2013-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201406 && cValue <= 201412) {\n            value = new Date('2014-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2015\n        else if (cValue > 201412 && cValue < 201506) {\n            value = new Date('2014-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201506 && cValue <= 201512) {\n            value = new Date('2015-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2016\n        else if (cValue > 201512 && cValue < 201606) {\n            value = new Date('2015-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201606 && cValue <= 201612) {\n            value = new Date('2016-12-30');\n            if (flag == 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2017\n        else if (cValue > 201612 && cValue < 201706) {\n            value = new Date('2016-12-30');\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201706 && cValue <= 201712) {\n            value = new Date('2017-12-30');\n            if (flag == 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        // slider inset\n        if (flag === \"handle1\") {\n            value1 = value;\n            d3.select(element + \" .slider-inset\").remove();\n            d3.select(element + \" .slider\")\n                .insert(\"line\", \"rect.background\")\n                .attr(\"x1\", timeScale(value))\n                .attr(\"x2\", insetValue2)\n                .attr(\"class\", \"slider-inset\")\n        }\n        if (flag === \"handle2\") {\n            value2 = value;\n            d3.select(element + \" .slider-inset\").remove();\n            d3.select(element + \" .slider\")\n                .insert(\"line\", \"rect.background\")\n                .attr(\"x1\", insetValue1)\n                .attr(\"x2\", timeScale(value))\n                .attr(\"class\", \"slider-inset\")\n        }\n        var startVal = formatDate(value1);\n\n        if (cValue != '0NaNNaN') {\n            startVal = (startVal == 2011) ? 2012 : parseInt(startVal) + 1;\n        }\n\n        $(\"#select-year-\" + type).attr('from', startVal);\n        $(\"#select-year-\" + type).attr('to', formatDate(value2));\n\n        console.log(startVal+\" : \"+ formatDate(value2));\n\n        getTrendData(route, type, widthOfParent, definedId, url);\n        flag = 0;\n    }\n\n\n};\n\nvar only_slider = function (widthOfParent, element) {\n    var formatDate = d3.time.format(\"%Y\");\n    var customFormat = d3.time.format(\"%Y%m\");\n    var cValue = 0;\n    var flag = 0;\n    var insetValue1, insetValue2;\n// parameters\n    var margin = {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n        },\n        width = widthOfParent - margin.left - margin.right,\n        height = 70 - margin.bottom - margin.top;\n\n// scale function\n    var timeScale = d3.time.scale()\n        .domain([new Date('2012-01-01 '), new Date('2017-12-30')])\n        .range([0, width])\n        .clamp(true);\n    var axistimeScale = d3.time.scale()\n        .domain([new Date('2011-01-01'), new Date('2017-01-01')])\n        .range([0, width])\n        .clamp(true);\n\n\n// initial value\n// var startValue = timeScale(new Date('2014-01-10'));\n    var startingValue1 = new Date('2012-01-01');\n    var startingValue2 = new Date('2017-12-30');\n\n// defines brush\n    var brush = d3.svg.brush()\n        .x(timeScale)\n        // .extent([startingValue1, startingValue2])\n        .on(\"brush\", brushed)\n        .on(\"brushend\", brushend);\n\n    var svg = d3.select(element).append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height / 2 + \")\")\n        .call(d3.svg.axis()\n            .scale(axistimeScale)\n            .orient(\"bottom\")\n            .tickFormat(function (d) {\n                return formatDate(d);\n            })\n            .tickSize(10)\n            .tickPadding(0)\n        )\n        .selectAll(\"text\")\n        .attr(\"x\", -width / 12);\n\n    var slider = svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,10)\")\n        .attr(\"class\", \"slider\")\n        .call(brush);\n\n    slider.selectAll(\".extent,.resize\").remove();\n\n// call(brush) generates <rect class=\"background\"> on slider. (see DOM in inspect element)\n// slider pointer (crosshair)\n    slider.select(\".background\")\n        .attr(\"height\", height / 2)\n        .style(\"fill\", \"white\");\n    // .style(\"visibility\",\"visible\");\n\n// slider white line\n    d3.select(element + \" .slider\")\n        .insert(\"line\", \"rect.background\")\n        .attr(\"x1\", \"0\")\n        .attr(\"x2\", width)\n        .attr(\"class\", \"main-line\");\n\n    var handle1 = slider.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height / 2) + \")\")\n        .attr(\"class\", \"handle1\");\n    var handle2 = slider.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height / 2) + \")\")\n        .attr(\"class\", \"handle2\");\n\n    handle1.append(\"circle\")\n        .attr(\"r\", \"6\")\n        .attr(\"class\", \"slider-circle\");\n\n    handle2.append(\"circle\")\n        .attr(\"r\", \"6\")\n        .attr(\"class\", \"slider-circle\");\n\n    var value1 = startingValue1;\n    var value2 = startingValue2;\n\n    handle1.attr(\"transform\", \"translate(\" + timeScale(value1) + \",0)\");\n    handle2.attr(\"transform\", \"translate(\" + timeScale(value2) + \",0)\");\n\n    slider.call(brush.event);\n\n\n    function brushed() {\n\n        var calculate = (+customFormat(value1) + +customFormat(value2)) / 2;\n        var mouseValue = timeScale.invert(d3.mouse(this)[0]);\n        if (customFormat(mouseValue) < calculate) {\n            value1 = mouseValue;\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value1) + \",0)\");\n            handle1.select('text').text(formatDate(value1));\n            flag = 1;\n        }\n        if (customFormat(mouseValue) > calculate) {\n            value2 = mouseValue;\n            handle2.attr(\"transform\", \"translate(\" + timeScale(value2) + \",0)\");\n            handle2.select('text').text(formatDate(value2));\n            flag = 2;\n        }\n\n        insetValue1 = timeScale(value1);\n        insetValue2 = timeScale(value2);\n\n        d3.select(element + \" .slider-inset\").remove();\n        // Initial slider inset\n        d3.select(element + \" .slider\")\n            .insert(\"line\", \"rect.background\")\n            .attr(\"x1\", insetValue1)\n            .attr(\"x2\", insetValue2)\n            .attr(\"class\", \"slider-inset\")\n\n    }\n\n//\n    function brushend() {\n        value = timeScale.invert(d3.mouse(this)[0]);\n        cValue = customFormat(value);\n        // 2012\n        if (cValue > 2011 && cValue < 201206) {\n            value = new Date('2011-12-30');\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n            flag = \"handle1\";\n        }\n        else if (cValue >= 201206 && cValue < 201212) {\n            value = new Date('2012-12-30');\n            handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n            flag = \"handle1\";\n\n        }\n// 2013\n        else if (cValue > 2013 && cValue < 201306) {\n            value = new Date('2012-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                handle1.select('text').text(formatDate(value));\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                handle2.select('text').text(formatDate(value));\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201306 && cValue <= 201312) {\n            value = new Date('2013-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2014\n        else if (cValue > 201312 && cValue < 201406) {\n            value = new Date('2013-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201406 && cValue <= 201412) {\n            value = new Date('2014-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2015\n        else if (cValue > 201412 && cValue < 201506) {\n            value = new Date('2014-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201506 && cValue <= 201512) {\n            value = new Date('2015-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2016\n        else if (cValue > 201512 && cValue < 201606) {\n            value = new Date('2015-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201606 && cValue <= 201612) {\n            value = new Date('2016-12-30');\n            if (flag === 1) {\n                handle1.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle1\";\n            }\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n\n// 2017\n        else if (cValue > 201612 && cValue < 201706) {\n            value = new Date('2016-12-30');\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        else if (cValue >= 201706 && cValue <= 201712) {\n            value = new Date('2017-12-30');\n            if (flag === 2) {\n                handle2.attr(\"transform\", \"translate(\" + timeScale(value) + \",0)\");\n                flag = \"handle2\";\n            }\n        }\n        // slider inset\n        if (flag === \"handle1\") {\n            value1 = value;\n            d3.select(element + \" .slider-inset\").remove();\n            d3.select(element + \" .slider\")\n                .insert(\"line\", \"rect.background\")\n                .attr(\"x1\", timeScale(value))\n                .attr(\"x2\", insetValue2)\n                .attr(\"class\", \"slider-inset\")\n        }\n        if (flag === \"handle2\") {\n            value2 = value;\n            d3.select(element + \" .slider-inset\").remove();\n            d3.select(element + \" .slider\")\n                .insert(\"line\", \"rect.background\")\n                .attr(\"x1\", insetValue1)\n                .attr(\"x2\", timeScale(value))\n                .attr(\"class\", \"slider-inset\")\n        }\n        var startVal = formatDate(value1);\n\n        if (cValue !== '0NaNNaN') {\n            startVal = (startVal === 2011) ? 2012 : parseInt(startVal) + 1;\n        }\n\n       // $(\"#select-year-\" + type).attr('from', startVal);\n       // $(\"#select-year-\" + type).attr('to', formatDate(value2));\n\n        console.log(\"Start Value \"+startVal+\", End value \"+ formatDate(value2));\n        $(\"#startDate\").val(startVal);\n        $(\"#endDate\").val(formatDate(value2));\n\n        flag = 0;\n    }\n\n\n};"]}